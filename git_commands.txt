git --version       //shows the current git version (it is good for checking if you have git installed)

git config --global user.name "name"        //used for configuring your git name
git config --global user.email "email"      //used for configuring your git email
git config --list       //lists all config settings
git config --list --show-origin     //shows the source for all configuration settings

git help <verb>         //git help config
git <verb> --help       //git config --help

rm -rf .git         //in order to remove .git directory and stop tracking our project

touch .gitignore        //create a simple text file that tell git which files and folders shouldn't be tracked

git init        //initialize a local git repository
git status      //see the current status of your repository and not tracked files and staged files

git add <file>      //add a file to the staging area
git add .       //add all files downward from CWD
git add -A (git add --all)     //add all files of repository to the staging area
git add <path>      //add all the files downward from the path to the staging area
git add --no-all <path>     //same as above but ignores the deleted files
git add -u       //same as git add -A but ignores the untracked files (only adds modified and deleted files)
git add -u <path>       //same as above but downward from the path


git reset <file>        //remove a file from the staging area (before committing the file)
git reset       //remove all files from the staging area

   
git commit -m "message"     //commit the files from the staging area with a message  
git log     //see the history of your commits and all commit hashes with the head for current branch
git log --stat      //see the history of your commits with each commit's files(each commits shows which files has it added or modified)

git clone <url> <where to clone>        //in order to clone an existing project and track it with a local repository as well (git clone will exclude files in .gitignore)
git remote -v       //show the remote repository of a local repository
git branch -a       //show all branches (local or remote branches)

git diff <branch>       //shows all the differences of current branch with the given branch
git diff        //shows all the differences of current from the last commit
git pull origin <branch>        //pull the latest changes of the given branch of remote repository
git push origin <branch>        //push the latest changes to the given branch of remote repository

git branch <name>       //create a new local branch with the given name
git checkout <name>     //change the current branch to the given branch name
git push -u origin <branch>         //set the upstream for the current local branch (links the current branch with a remote branch of the given name so that in later usage you can use git push and git pull alone and git automaically recognizes the link between the local and remote branch)

git branch --merged <branch>        //list branches merged into the given branch
git branch --merged         //list branches merged into HEAD (i.e. tip of current branch)
git branch --no-merged      //opposite of git branch --merged

git merge <branch>          //takes the changes from the given branch and merges into the current branch (changes from the given branch are copied to the current branch)

git branch -d <branch>      //delete the given local branch after merge
git push origin --delete <branch>       //delete the given remote branch

git checkout -- <file>         //revert the changes for the given file if it is not staged or commited yet but doesn't touch the untracked files (reverts the file to it's last commit)
git checkout -- .       //like the command above but works for all files instead (same as above this doesn't touch untracked files)
//if you have staged the file you can unstage it with git reset and then run the command above

git commit -amend -m "new message"      //if you have commited with the wrong message this command lets you fix your last commit message
//note that amending a commit changes the hash for that commit which means that it changes the git history

//in order to add new files to the last commit without creating a new commit first you have to stage the files and run the command below
git commit --amend      //this command opens a editor that lets you completely modify your last commit

//if you have commited to the wrong branch then take the commit hash and checkout to the desired branch and run the command below
git cherry-pick <commit hash>       //this creats a new commit to the new branch with a different hash

//there are 3 types of git reset <hash> and the default is git reset --mixed (if no switch is given) note that the hash is for the commit you want to go to not the commit you want to delete (the hash you select is the commit the keeps the changes of that commit)
git reset --soft <hash>         //remove the commits after the hash and keep all the changes after the hash in stage area
git reset <hash>        //remove the commits after the hash and keep all the changes after the hash in working directory as unstaged
git reset --hard <hash>     //remove the commits after the hash and deletes all the changes after the hash from the working directory for tracked files (doesn't touch the untracked files)
//using any of the git reset without any hash does the same trick on with last commit hash on that branch
git clean -df       //deletes all the untracked files and directories (d switch is for directories and f switch is for forcing the command)


//if you accidently delte changes with git reset --hard you have sometime before the git garbage collector completely removes that commit (usually it is 30 days)
git reflog      //this shows a list of commits that head has pointed to and shows the history of commands in order
//take the commit that you have deleted from the git reflog and checout to it
git checkout <hash>     //go to the given commit hash (note that in this state your are not in a branch and you're at detached HEAD state and you should create a new branch to save your deleted changes)
git branch backup       //create a new backup branch (name doesn't have to be backup exactly) to revert the deleted changes from the detached HEAD
//then you can checkout to your desired brach and your recovery changes are in your backup branch

//up untill now we have fixed our situations with changing the git history but changing git history is not recommended if other's have already pulled your changes. basically change the git history if you're the only one that has access to does changes
git revert <hash>       //use this if others have already accessd the git history and this command creates a new command on top and says that from the given hash (including the given hash) forward all changes are removed but all the commits stay in git history
git diff <hash1> <hash2> compare changes from two given commits


//stashing is used for when you have made some changes and you're not ready to commit but you have to checkout to a different branch and this stash keeps your code temporaraly safe untill you come back and commit the changes.
//git stash is same as git stash save but if you need to use any switches you have to use git stash save

git stash save "message"        //stash the changes of tracked files with a given message
git stash save "message"        //stash the changes of all files (tracked or untracked)
git stash list          //lists all the stashes with their ID's and which branch they were stashed on
git stash apply <stash ID>      //apply the changes of stash to your current branch (doesn't remove the stash the list)
// not that stashes or stored in a stack and not a queue so the last stash gets the first ID.
//note that you can apply stashes to any branch as long as that branch is not behind on commits from the moment the stash was created on a different branch.
git stash pop       //applies the changes from the latest stash to the current branch and remove the stash from the list

git stash drop <stash ID>       //removes a stash from the list without saving it's changes to the branch
git stash clear         //remove the stash list completely




gitk --all


git rm --cached <filename>
git rm --cached -r .


git show <commit hash>
git remote add origin
git remote remove origin
git remote set-url origin <url>
git push
git pull
git branch (local branches)
git branch -r (remote branches)


git checkout -b <branch name> (create and switch to new branch)
git checkout - (switch back to last branch)
git remote prune origin (removes remote branches that have been deleted)
git pull -r(--rebase) origin main(this command takes the latest commit from the main branch and then you have to rebase each commit from the current branch on top of it and solve conflicts manually)
git rebase -continue (move on to next commit for rebasing)
git push -f (forces the push)
git pull -f (forces the pull)
