pip install --upgrade pip       //for upgrading pip

pip install pipenv      //for insalling pipenv

cd ./Test_project       // navigate to the directory that you want to use virtual environment for it

pipenv install requests     //this creates an venv in our directory and installs the packages (here we install requests package)

//pipfile is an requirements file that shows which packages and which version of them are being used in this venv

//pipfile uses TOML format which is designed to be a minimal format that mostly contains keys and values within different sections

//in the packages section in pipfile we see that requests = "*" which means that no specific version was set and if we update our packages it updates our venv package as well

//pipfile is editable and we can add packages or change the version of our packages

//pipfile.lock is like pipfile but it is autogenerated and has more information than pipfile and it's not meant to be edited

pipenv shell        //to activate our venv

which python        //to make sure we are using our venv python and venv is successfully activated

exit        //to deactivate the venv

//we can run commands in our venv without activating it

pipenv run <command>        //run any command in your venv without activating it

pipenv run python       //run python in venv


//requirements.txt file is just a list of dependancies and packages that a python venv needs

pipenv install -r <path to requirements.txt file>       //to install dependancies form requirements.txt file

pipenv lock -r -d     //list dependancies for a requirements.txt file (-d is optional and is to show dev packages as well)

pipenv install pytest --dev         //to install a package only for development section and not for production section

pipenv uninstall requests       //to uninstall a package from venv

pipenv --rm         //to completely remove a venv

//we can use a different verion of python in our venv by editing the pipfile then running the command below

pipenv --python <version>       //recreate the venv using the new python version

//when removing an venv it does not delete the pipfile and pipfile.lock so creating a new venv uses pipfile dependancies and adds them to the new venv

pipenv install          //used to recreate a venv if a pipfile exists

pipenv --venv       //gives the path to venv

pipenv check        //checks to see if our dependancies have a problem or if a new version is available

pipenv graph        //shows venv packages and if a package is a dependancy of another package

pipenv lock         //when we're ready to push our project to production phase and we've done all our tests on our modules and libraries we run this command to lock the pipfile.lock with the exact version of our modules

pipenv install --ignore-pipfile         //after the last command we move our pipfile.lock file to produciton environment and run this command to create a venv using exact modules in pipfile.lock

//to have environment variables for a venv we create a .env file in project folder and set our environment variables

//we can access our environment variables by importing os and accessing them through os.environ

//don't commit .env files to git

